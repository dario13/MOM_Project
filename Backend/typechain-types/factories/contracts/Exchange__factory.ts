/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Exchange, ExchangeInterface } from "../../contracts/Exchange";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "EthersTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientTokensInReserve",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientWeiInReserve",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "MinimumAmountNotReached",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenAllowanceNotEnough",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenFraction",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Bought",
    type: "event",
  },
  {
    inputs: [],
    name: "buyToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositWei",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractTokenBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minimumAmountToExchange",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sellToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minimumAmountToExchange",
        type: "uint256",
      },
    ],
    name: "setMinimumAmountToExchange",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    name: "setToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "weiBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "destAddr",
        type: "address",
      },
    ],
    name: "withdrawWei",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620018f2380380620018f28339818101604052810190620000379190620000fc565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550655af3107a40006001819055505050620001c4565b600081519050620000df8162000190565b92915050565b600081519050620000f681620001aa565b92915050565b600080604083850312156200011657620001156200018b565b5b60006200012685828601620000ce565b92505060206200013985828601620000e5565b9150509250929050565b600062000150826200016b565b9050919050565b6000620001648262000143565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200019b8162000143565b8114620001a757600080fd5b50565b620001b58162000157565b8114620001c157600080fd5b50565b61171e80620001d46000396000f3fe6080604052600436106100c25760003560e01c8063625a32e91161007f578063a482171911610059578063a482171914610221578063b2e18d581461022b578063be4b177214610256578063fc0c546a1461027f576100c2565b8063625a32e9146101a2578063893d20e8146101cb5780638da5cb5b146101f6576100c2565b8063144fa6d7146100c757806315488b88146100f05780632397e4d7146100fa5780632969d2021461012357806330de59991461014e578063317d945314610177575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e99190610fa1565b6102aa565b005b6100f8610375565b005b34801561010657600080fd5b50610121600480360381019061011c9190610fce565b61038f565b005b34801561012f57600080fd5b506101386105b4565b60405161014591906112f8565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190610fce565b6105ba565b005b34801561018357600080fd5b5061018c61064b565b60405161019991906112f8565b60405180910390f35b3480156101ae57600080fd5b506101c960048036038101906101c49190611028565b6106fd565b005b3480156101d757600080fd5b506101e0610880565b6040516101ed91906111b7565b60405180910390f35b34801561020257600080fd5b5061020b6108aa565b60405161021891906111b7565b60405180910390f35b6102296108d0565b005b34801561023757600080fd5b506102406109f2565b60405161024d91906112f8565b60405180910390f35b34801561026257600080fd5b5061027d60048036038101906102789190611028565b6109f8565b005b34801561028b57600080fd5b50610294610b11565b6040516102a1919061125b565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610331576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b346000808282546103869190611345565b92505081905550565b60008114156103ca576040517f2160733900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016104299291906111d2565b60206040518083038186803b15801561044157600080fd5b505afa158015610455573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104799190610ffb565b9050818110156104b5576040517f896e4ee800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610504333084600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b37909392919063ffffffff16565b60003373ffffffffffffffffffffffffffffffffffffffff1661052684610bc0565b604051610532906111a2565b60006040518083038185875af1925050503d806000811461056f576040519150601f19603f3d011682016040523d82523d6000602084013e610574565b606091505b50509050806105af576040517f066009d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60005481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610641576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060018190555050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106a891906111b7565b60206040518083038186803b1580156106c057600080fd5b505afa1580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f89190610ffb565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610784576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000548211156107c0576040517f9858115d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816000808282546107d19190611426565b9250508190555060008173ffffffffffffffffffffffffffffffffffffffff16836040516107fe906111a2565b60006040518083038185875af1925050503d806000811461083b576040519150601f19603f3d011682016040523d82523d6000602084013e610840565b606091505b505090508061087b576040517f066009d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000349050600154811015610911576040517f1fb5a28f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61091961064b565b61092282610bd7565b111561095a576040517fcf909abf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61096381610bee565b1561099a576040517ffa82575100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109ef336109a783610bd7565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c089092919063ffffffff16565b50565b60015481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a7f576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a8761064b565b821115610ac0576040517fcf909abf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b0d8183600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c089092919063ffffffff16565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610bba846323b872dd60e01b858585604051602401610b58939291906111fb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c8e565b50505050565b600060015482610bd091906113cc565b9050919050565b600060015482610be7919061139b565b9050919050565b60008060015483610bff919061151d565b14159050919050565b610c898363a9059cbb60e01b8484604051602401610c27929190611232565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c8e565b505050565b6000610cf0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610d559092919063ffffffff16565b9050600081511115610d505780806020019051810190610d109190610f74565b610d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d46906112d8565b60405180910390fd5b5b505050565b6060610d648484600085610d6d565b90509392505050565b606082471015610db2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da990611298565b60405180910390fd5b610dbb85610e81565b610dfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df1906112b8565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e23919061118b565b60006040518083038185875af1925050503d8060008114610e60576040519150601f19603f3d011682016040523d82523d6000602084013e610e65565b606091505b5091509150610e75828286610ea4565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315610eb457829050610f04565b600083511115610ec75782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb9190611276565b60405180910390fd5b9392505050565b600081359050610f1a8161168c565b92915050565b600081519050610f2f816116a3565b92915050565b600081359050610f44816116ba565b92915050565b600081359050610f59816116d1565b92915050565b600081519050610f6e816116d1565b92915050565b600060208284031215610f8a57610f896115ac565b5b6000610f9884828501610f20565b91505092915050565b600060208284031215610fb757610fb66115ac565b5b6000610fc584828501610f35565b91505092915050565b600060208284031215610fe457610fe36115ac565b5b6000610ff284828501610f4a565b91505092915050565b600060208284031215611011576110106115ac565b5b600061101f84828501610f5f565b91505092915050565b6000806040838503121561103f5761103e6115ac565b5b600061104d85828601610f4a565b925050602061105e85828601610f0b565b9150509250929050565b6110718161145a565b82525050565b600061108282611313565b61108c8185611329565b935061109c8185602086016114ea565b80840191505092915050565b6110b1816114b4565b82525050565b60006110c28261131e565b6110cc8185611334565b93506110dc8185602086016114ea565b6110e5816115b1565b840191505092915050565b60006110fd602683611334565b9150611108826115c2565b604082019050919050565b6000611120600083611329565b915061112b82611611565b600082019050919050565b6000611143601d83611334565b915061114e82611614565b602082019050919050565b6000611166602a83611334565b91506111718261163d565b604082019050919050565b611185816114aa565b82525050565b60006111978284611077565b915081905092915050565b60006111ad82611113565b9150819050919050565b60006020820190506111cc6000830184611068565b92915050565b60006040820190506111e76000830185611068565b6111f46020830184611068565b9392505050565b60006060820190506112106000830186611068565b61121d6020830185611068565b61122a604083018461117c565b949350505050565b60006040820190506112476000830185611068565b611254602083018461117c565b9392505050565b600060208201905061127060008301846110a8565b92915050565b6000602082019050818103600083015261129081846110b7565b905092915050565b600060208201905081810360008301526112b1816110f0565b9050919050565b600060208201905081810360008301526112d181611136565b9050919050565b600060208201905081810360008301526112f181611159565b9050919050565b600060208201905061130d600083018461117c565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611350826114aa565b915061135b836114aa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113905761138f61154e565b5b828201905092915050565b60006113a6826114aa565b91506113b1836114aa565b9250826113c1576113c061157d565b5b828204905092915050565b60006113d7826114aa565b91506113e2836114aa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561141b5761141a61154e565b5b828202905092915050565b6000611431826114aa565b915061143c836114aa565b92508282101561144f5761144e61154e565b5b828203905092915050565b60006114658261148a565b9050919050565b60008115159050919050565b60006114838261145a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006114bf826114c6565b9050919050565b60006114d1826114d8565b9050919050565b60006114e38261148a565b9050919050565b60005b838110156115085780820151818401526020810190506114ed565b83811115611517576000848401525b50505050565b6000611528826114aa565b9150611533836114aa565b9250826115435761154261157d565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b50565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6116958161145a565b81146116a057600080fd5b50565b6116ac8161146c565b81146116b757600080fd5b50565b6116c381611478565b81146116ce57600080fd5b50565b6116da816114aa565b81146116e557600080fd5b5056fea2646970667358221220536389bb3e9bb1e5ad633798ad4a0dd74f121f9df95938ff7f30ac9741b628c964736f6c63430008070033";

type ExchangeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Exchange__factory extends ContractFactory {
  constructor(...args: ExchangeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Exchange> {
    return super.deploy(_owner, _token, overrides || {}) as Promise<Exchange>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, _token, overrides || {});
  }
  override attach(address: string): Exchange {
    return super.attach(address) as Exchange;
  }
  override connect(signer: Signer): Exchange__factory {
    return super.connect(signer) as Exchange__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeInterface {
    return new utils.Interface(_abi) as ExchangeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Exchange {
    return new Contract(address, _abi, signerOrProvider) as Exchange;
  }
}
